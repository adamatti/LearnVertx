plugins {
    id 'groovy'
    id 'application'
    id 'idea'
}

mainClassName = 'adamatti.Main'

repositories {
    jcenter()
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
}

dependencies {
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.0', ext: 'pom'

    compile group: 'io.vertx', name: 'vertx-lang-groovy', version: '3.5.2'
    compile group: 'io.vertx', name: 'vertx-web', version: '3.5.2'
    compile group: 'io.vertx', name: 'vertx-camel-bridge', version: '3.5.2'
    compile group: 'io.vertx', name: 'vertx-redis-client', version: '3.5.2'
    compile group: 'io.vertx', name: 'vertx-mongo-client', version: '3.5.2'
    compile group: 'io.vertx', name: 'vertx-kafka-client', version: '3.5.2'

    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = false

        iml.withXml {
            def node = it.asNode()
            def content = node.component.find { it.'@name' == 'NewModuleRootManager' }.content[0]
            content.sourceFolder.each { sourceFolder ->
                if (sourceFolder.@url?.endsWith('/resources')) {
                    sourceFolder.attributes().with {
                        boolean isTestSource = (remove('isTestSource') == 'true')
                        put('type', isTestSource ? 'java-test-resource' : 'java-resource')
                    }
                }
            }
        }
    }
}
